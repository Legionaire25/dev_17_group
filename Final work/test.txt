Тест:
1. Что такое функция и как ее объявить?
Ответ:
Функцию можно использовать для упрощения кода, повторного использования и организации программы.
Функцию можно объявить в языке программирования с помощью ключевого слова "function".

2.Как создать функцию?
Ответ:
def my_function(param1, param2):
    result = param1 + param2
    return result

3.Как показать что созданная функция возвращает результат?
Ответ:
def my_function(param1, param2):
    result = param1 + param2
    return result

result = my_function(1, 2)
print(result)

4. В чем разница между параметрами и аргументами функции?
Ответ:
Параметры функции - это переменные, которые объявляются в определении функции.
Они используются для хранения значений, которые передаются функции при ее вызове.

Аргументы функции - это значения, которые передаются функции при ее вызове.
Они соответствуют параметрам функции по порядку.

5.Как рекурсивные функции работают в Python?
Ответ:
Рекурсивная функция - это функция, которая вызывает сама себя в своем теле.
Рекурсия в программировании очень похожа на цикл, в котором функция вызывается на каждой итерации
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

result = factorial(5)
print(result)

6. Что такое декораторы функций и как они используются? (привести свой пример декоратора)
Ответ:
Декораторы функций - это мощный инструмент, который позволяет изменять поведение функций без изменения их исходного кода.
Декораторы реализуются с помощью специального синтаксиса @, который ставится перед вызовом функции.

def my_decorator(func):
 def wrapper():
 print("Что-то происходит до вызова функции.")
func()
 print("Что-то происходит после вызова функции.")
 return wrapper

@my_decorator
def say_hello():
 print("Привет!")

say_hello()

7.Как расшифровывается ООП?
Ответ:
ООП - Объектно-ориентированное программирование

8. Что относится к основным принципам(парадигмам) ООП?
Ответ:
Полиморфизм
Наследование
Инкапсуляция

9.Что будет результатом программы и почему?
class Test:
    test = None
print(Test.test)
Ответ:
В коде создается класс Test с атрибутом test, которому присваивается значение None
Поскольку test был инициализирован значением None,  будет выведено None

10. Какой принцип ООП описывает следующее предложение?
Этот принцип является способностью использовать общий интерфейс для нескольких форм (типов данных).
Ответ:
Полиморфизма

11.Какой из перечисленных вариантов является верным объявлением private поля?
private field = 0
field = 0
_field = 0
__field = 0
Ответ:
__field = 0

12.Как создать конструктор класса?
Ответ:
class MyClass:
    def __init__(self, param1, param2):
        self.param1 = param1
        self.param2 = param2

13. Как много конструкторов в классе может иметь Python?
Ответ:
Может иметь только один работающий конструктор.

14.Что будет результатом данной программы
class Test:
   def print_text(self):
   print('Это родительский класс Test')

class Test2(Test):
   def print_text(self):
   print('Это класс потомок Test2')

test = Test2()
test.print_text()
Ответ:
'Это класс потомок Test2' , потому что происходит переопределение методов

15. Какой параметр обязательно принимает в себя метод экземпляра?
тип объекта
сам экземпляр класса
название класса
таких аргументов нет
Ответ:
сам экземпляр класса

16.Как использовать инкапсуляцию для защиты данных в классах?
Ответ:
class MyClass:
    def __init__(self):
        self.__private_attribute = 0

17. Какая разница между абстрактными классами и интерфейсами в Python?
Ответ:
В том, что абстрактные классы могут содержать как реализованные,
так и абстрактные методы, а интерфейсы содержат только абстрактные методы

18.Как показать в классе что метод является абстрактым?
Ответ:
from abc import ABC, abstractmethod

class MyAbstractClass(ABC):
    @abstractmethod
    def my_abstract_method(self):
        pass

19.Что будет результатом программы?
class Test:
  __test = 0
print(Test.__test)
Ответ:
Будет ошибка, потому что __test является приватным атрибутом класса

20. Что делает финализатор класса?
Ответ:
метод класса, который автоматически вызывается перед удалением, освобождает занимаемой им памяти.

21. Распишите работу магических методов: new, call
Ответ:
new - создает и возращает новый объект, применяется когда наследуется от неизменяемого типа
call - позволяет объект класса вести себя как функцию, можно вызвать объект как если бы он был функцией

22. Если в классе определены два метода с одинаковыми именами и разными списками параметров,
 что будет результатом?
 Ответ:
То второе определение заменит первое

23. Значением поля класса по умолчанию может являться?
значение переменной
константа
результат вызова функции
возможность указания значений полей по умолчанию в Python не предусмотрена
Ответ:
константа

24.Укажите результат выполнения скрипта и почему:
class Foo:
    count = x

    def __init__(self):
        self.count += 1

    def __del(self):
        self.count += 1

obj = Foo()
print(obj.count)
Ответ:
Ошибка из-за переменной х
Метод del  должен быть вызван с двумя подчеркиваниями с обеих сторон

25.Как указать в программе что класс A наследуется от B?
Ответ:
class B:
    pass

class A(B):
    pass

26. Что такое API и для чего оно используется?
Ответ:
это набор правил и протоколов,
используемых для взаимодействия между различными программными компонентами
работа с базами данных, для доступа к вэб сервисам,

27. Какие преимущества предоставляют API?
Ответ:
Интеграция
Автоматизация
Безопасность
Маштабируемость
Модульность

28. Расскажите о различных типах HTTP-запросов.
Ответ:
GET - получение данных от сервера
POST - отправки данных на сервер
PUT - обновление данных на сервере
DELETE - удаление дынных на сервере
HEAD - возращает заголовки
PATCH - для обновления ресурса

29.Какие основные методы HTTP используются в RESTful API?
Ответ:
GET
POST
PUT
PATCH
DELETE
HEAD
OPTIONS

30. Что такое запросы GET, POST, PUT и DELETE? Как они используются в API?
Ответ:
GET - получение данных от сервера
POST - отправки данных на сервер
PUT - обновление данных на сервере
DELETE - удаление дынных на сервере

31. Что такое заголовки HTTP? Какие заголовки часто используются в API?
Ответ: